#pragma kernel Sph
#pragma kernel Sort
#pragma kernel Gravity
#pragma kernel Power
#pragma kernel SmoothBall

struct Particle
{
	float3 pos;
	float3 vel;
	float3 force;
	float3 color;
	float d;
	float p;
	uint xrank;
	uint yrank;
	uint zrank;
};

// actually an array of 3 floats, in cpu land
struct Stats
{
	int thread_count;
	float max_density;
	float min_density;
};

globallycoherent RWStructuredBuffer<Particle> cloud;
globallycoherent RWStructuredBuffer<uint> index_by_x;
RWStructuredBuffer<Stats> statistics; 
RWStructuredBuffer<uint> index_by_x_pong;

// some globals
float particleRadius;
float particleRestDensity;
float particleMass;
float smoothingLength;
float smoothingLength2;
float smoothingLength3; // cubed
float smoothingLength6; // pow(sml,6)
float smoothingLength9; 
float particleStiffness;
float particleViscosity;
float time_step; 


#define PI_FLOAT 3.14159265358979


/*** STARTED FROM CODE BY:
// https://github.com/multiprecision/sph_opengl/tree/master/shader
// also see:
// rlguy.com/sphfluidsim/
// 
// much mdifications, changes pending to go into 3D and follow papers such as:
// Daniel J. Price
// Smoothed Particle Hydrodynamics and Magnetohydrodynamics
***/ 

// rank sort
[numthreads(1024, 1, 1)]
void Sort(uint3 id : SV_DispatchThreadID)
{
	uint npts;
	uint stride;
	cloud.GetDimensions(npts,stride);

	float3 d;

	Particle p = cloud[id.x];
	p.xrank = 0;
	p.yrank = 0;
	p.zrank = 0;
	for (uint ri=0; ri < npts; ri++) {
		d = cloud[ri].pos;
		if ((p.pos.x<d.x)||(ri==id.x)) {
			p.xrank +=1;
		}
		if ((p.pos.y<d.y)||(ri==id.x)) {
			p.yrank +=1;
		}
		if ((p.pos.z<d.z)||(ri==id.x)) {
			p.zrank +=1;
		}
	}
	cloud[id.x].xrank = p.xrank;
	AllMemoryBarrierWithGroupSync(); 

	for (uint q=0; q<npts; q ++ ) {
		if (cloud[q].xrank == id.x) {
			index_by_x[id.x] = q; 
		}
	}
}

[numthreads(1024, 1, 1)]
void Sph(uint3 id : SV_DispatchThreadID)
{
	uint npts;
	uint stride;
	cloud.GetDimensions(npts,stride);

	float3 a = 0;
	float3 d = 0;
	float3 d2;
	float r;
	float r2;
	float factor2 = particleMass * 315.0 / ( 64.0*PI_FLOAT*smoothingLength9);
	float dsum = 0;


	// COLOR OUT OF ORDER POINTS
	for (uint qt=1; qt<npts; qt ++ ) {
		Particle p1 = cloud[index_by_x[qt]];
		Particle p2 = cloud[index_by_x[qt-1]];
		if (p1.pos.x > p2.pos.x) {
			cloud[index_by_x[qt]].color.b = 1;
		} 
	}

	uint sortedId =  index_by_x[id.x];
	Particle p = cloud[sortedId];

	int spanx = 80;

	while ((abs(cloud[index_by_x[id.x+spanx]].pos.x -p.pos.x) <=  smoothingLength)&&(spanx<(npts-id.x))) {
		spanx +=1;
	}
	while ((abs(cloud[index_by_x[id.x-spanx]].pos.x - p.pos.x) <= smoothingLength)&&(spanx<id.x)) {
		spanx +=1;
	}
	spanx +=5;

	uint lowx = 0; // max(id.x - spanx,0);
	uint highx = npts; // min(id.x+spanx,npts);
	uint lowxs =  max(id.x - spanx,0);
	uint highxs = min(id.x+spanx,npts);
	for (uint l = lowxs; l < highxs; ++l) {
		d = cloud[index_by_x[l]].pos - p.pos;
		r = length(d); 
		if (r < smoothingLength) {
			r2 = dot(r,r);
			dsum +=pow((smoothingLength2-r2),3);
			// color the zone of smoothing for one arbitrary point at 2000
			if (sortedId == 5000) {
				cloud[index_by_x[l]].color.r = ((l>=lowxs)&&(l<highxs))?0:1;
				cloud[index_by_x[l]].color.g = ((l>=lowxs)&&(l<highxs))?1:0;
			}
		}
	}		

	dsum *= factor2;
	cloud[sortedId].d = dsum;
	float densityDelta = dsum - particleRestDensity;

	cloud[sortedId].p =  max(particleStiffness * densityDelta, 0.f);

// BARRIER ONE, now PRESSURE FORCE
	AllMemoryBarrierWithGroupSync(); 

	cloud[sortedId].color *= float3(0.995,.97,0.97); 

	float factor1;
	float3 p_fs = 0;
	float3 v_fs = 0;
	float3 g = 0;

	factor1 = 45.0 / (PI_FLOAT * smoothingLength6);
	p = cloud[sortedId];

	for (uint j = lowxs; j < highxs; ++j) {
		uint ibxj = index_by_x[j];
		if (ibxj == sortedId) {
			continue;
		}
		d = (cloud[ibxj].pos - p.pos);
		r2 = dot(d,d);
		if (r2<smoothingLength2)
		{
			r = sqrt(r2); 
			p_fs -= (p.p + cloud[ibxj].p) / (2.0 - cloud[ibxj].d) *  pow(smoothingLength - r, 2) * normalize(d);
			v_fs += (cloud[ibxj].vel - p.vel)/cloud[ibxj].d *  (smoothingLength -r);
		}
	}


	v_fs *= particleViscosity;
	g.y = -100000000000000000.0 * cloud[sortedId].d;


	float size;
	size = 12;
	float repulse;
	repulse = 1000000000000000000.0 * p.d;
	float3 force;
	force = 0;
	if (p.pos.x < -size) { 
		force.x = -repulse * (p.pos.x + size);
		cloud[sortedId].vel *= 0.99;
	} else if (p.pos.x > size) { 
		force.x = -repulse * (p.pos.x - size);
		cloud[sortedId].vel *= 0.99;
	}
	if (p.pos.y < -size) { 
		force.y = -repulse * (p.pos.y + size);
		cloud[sortedId].vel *= 0.99;
	} else if (p.pos.y > size) { 
		force.y = -repulse * (p.pos.y - size);
		cloud[sortedId].vel *= 0.99;
	}
	if (p.pos.z < -size) { 
		force.z = -repulse * (p.pos.z + size);
		cloud[sortedId].vel *= 0.99;
	} else  if (p.pos.z > size) { 
		force.z = -repulse * (p.pos.z - size);
		cloud[sortedId].vel *= 0.99;
	}


  // cloud[sortedId].force = particleMass * factor1 * ( v_fs + p_fs + g );
    cloud[sortedId].force = particleMass * factor1 * ( v_fs + p_fs + g + force);

// BARRIER 2, NOW INTEGRATE
	AllMemoryBarrierWithGroupSync();

	a = cloud[sortedId].force / cloud[sortedId].d;
	float3 v_n = cloud[sortedId].vel;
	float3 p_n = cloud[sortedId].pos;
	v_n += a * time_step;
	p_n += v_n * time_step;

	cloud[sortedId].pos = p_n;
	cloud[sortedId].vel = v_n;

	// AllMemoryBarrierWithGroupSync();

	InterlockedAdd(statistics[0].thread_count,1); // needs to be atomic. float or int or whatt?
};

[numthreads(1024, 1, 1)]
void Gravity(uint3 id : SV_DispatchThreadID)
{
	uint npts;
	uint stride;
	cloud.GetDimensions(npts,stride);
	Particle p = cloud[id.x];
	float3 a = 0;
	float3 d = 0;
	float3 d2;
	float l2;
	for (uint j = 0; j < id.x; ++j) {
		d = (cloud[j].pos - p.pos);
		d2 = d*d;
		l2 = d2.x + d2.y + d2.z;
		a +=  normalize(d) / l2;
	}
	for (uint k = id.x+1; k < npts; ++k) {
		d = (cloud[k].pos - p.pos);
		d2 = d*d;
		l2 = d2.x + d2.y + d2.z;
		a +=  normalize(d) / l2;
	}
	cloud[id.x].force = a;

	AllMemoryBarrierWithGroupSync();

	a = cloud[id.x].force / cloud[id.x].d;
	float3 v_n = cloud[id.x].vel;
	float3 p_n = cloud[id.x].pos;
	v_n += a * time_step;
	p_n += cloud[id.x].vel * time_step;

	if (p_n.x < -150) { 
		p_n.x = -150;
		v_n.x *= -0.3;
	}
	if (p_n.x > 150) { 
		p_n.x = 150;
		v_n.x *= -0.3;
	}
	if (p_n.y < -150) { 
		p_n.y = -150;
		v_n.y *= -0.3;
	}
	if (p_n.y > 150) { 
		p_n.y = 150;
		v_n.y *= -0.3;
	}
	if (p_n.z < -150) { 
		p_n.z = -150;
		v_n.z *= -0.3;
	}
	if (p_n.z > 150) { 
		p_n.z = 150;
		v_n.z *= -0.3;
	}

	cloud[id.x].pos = p_n;
	cloud[id.x].vel = v_n;
};

[numthreads(1024, 1, 1)]
void Power(uint3 id : SV_DispatchThreadID)
{
	uint npts;
	uint stride;
	cloud.GetDimensions(npts,stride);
	Particle p = cloud[id.x];
	float3 a = 0;
	float3 d = 0;
	for (uint j = 0; j < id.x; ++j) {
		d = (cloud[j].pos - p.pos);
		a +=  d * length(d);
	}
	for (uint k = id.x+1; k < npts; ++k) {
		d = (cloud[k].pos - p.pos);
		a +=  d * length(d);
	}
	cloud[id.x].force = a * 0.01;

	AllMemoryBarrierWithGroupSync();

	a = cloud[id.x].force / cloud[id.x].d;
	float3 v_n = cloud[id.x].vel;
	float3 p_n = cloud[id.x].pos;
	v_n += a * time_step;
	p_n += cloud[id.x].vel * time_step;

	if (p_n.x < -150) { 
		p_n.x = -150;
		v_n.x *= -0.3;
	}
	if (p_n.x > 150) { 
		p_n.x = 150;
		v_n.x *= -0.3;
	}
	if (p_n.y < -150) { 
		p_n.y = -150;
		v_n.y *= -0.3;
	}
	if (p_n.y > 150) { 
		p_n.y = 150;
		v_n.y *= -0.3;
	}
	if (p_n.z < -150) { 
		p_n.z = -150;
		v_n.z *= -0.3;
	}
	if (p_n.z > 150) { 
		p_n.z = 150;
		v_n.z *= -0.3;
	}

	cloud[id.x].pos = p_n;
	cloud[id.x].vel = v_n;

};

[numthreads(1024, 1, 1)]
void SmoothBall(uint3 id : SV_DispatchThreadID)
{
	uint npts;
	uint stride;
	cloud.GetDimensions(npts,stride);
	Particle p = cloud[id.x];
	float3 a = 0;
	float3 d = 0;
	float l2;
	float adr;
	for (uint j = 0; j < id.x; ++j) {
		d = (cloud[j].pos - p.pos);
		l2 = dot(d,d);
		if (l2 > 0.0001) {
		a +=  normalize(d) / l2;
		}
	}
	for (uint k = id.x+1; k < npts; ++k) {
		d = (cloud[k].pos - p.pos);
		l2 = dot(d,d);
		if (l2 > 0.0001) {
		a +=  normalize(d) / l2;
		}
	}

	adr = dot(a,normalize(p.pos));

	cloud[id.x].force = -(a-adr*normalize(p.pos)) * 0.001;

	AllMemoryBarrierWithGroupSync();

	cloud[id.x].pos += cloud[id.x].force;

	cloud[id.x].force = 0;
};


