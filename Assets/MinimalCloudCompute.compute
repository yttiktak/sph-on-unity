#pragma kernel Sph
// Measure number of particles in an smoothing_length sphere
struct ParticlePosition
{
	float3 pos;
};
struct ParticleNeighbors
{
	uint neighbor[100];
};
struct ParticlePyhsics
{
	float3 vel;
	float3 force;
	float d;
	float p;
};
struct ParticleData
{
	float3 color;
};

// actually an array of 3 floats, in cpu land
struct Stats
{
	int thread_count;
	int tot_density;
	int max_density;
};

globallycoherent RWStructuredBuffer<ParticlePosition> cloudPosition;
globallycoherent RWStructuredBuffer<ParticlePyhsics> cloudPhysics;
globallycoherent RWStructuredBuffer<ParticleData> cloudData;
RWStructuredBuffer<Stats> statistics; 

// some globals
float particleRadius;
float particleRestDensity;
float particleMass;
float smoothingLength;
float smoothingLength2;
float smoothingLength3; // cubed
float smoothingLength6; // pow(sml,6)
float smoothingLength9; 
float particleStiffness;
float particleViscosity;
float time_step; 


#define PI_FLOAT 3.14159265358979


/*** STARTED FROM CODE BY:
// https://github.com/multiprecision/sph_opengl/tree/master/shader
// also see:
// rlguy.com/sphfluidsim/
// 
// much mdifications, changes pending to go into 3D and follow papers such as:
// Daniel J. Price
// Smoothed Particle Hydrodynamics and Magnetohydrodynamics
***/ 


[numthreads(1024, 1, 1)]
void Sph(uint3 id : SV_DispatchThreadID)
{
	uint npts;
	uint stride;
	cloudPosition.GetDimensions(npts,stride);

	float3 a = 0;
	float3 d = 0;
	float3 d2;
	float r;
	float r2;
	float factor2 = particleMass * 315.0 / ( 64.0*PI_FLOAT*smoothingLength9);
	float dsum = 0;
	int nHit;

	ParticlePosition p = cloudPosition[id.x];

	nHit = 0;
	for (uint l = 0; l < npts; ++l) {
		d = cloudPosition[l].pos - p.pos;
		r2 = dot(d,d); 
		if (r2 < smoothingLength2) {
			nHit +=1;
			dsum +=pow((smoothingLength2-r2),3);
		}
	}	
	if (nHit > statistics[0].max_density) {
	   statistics[0].max_density = nHit;
	}
	InterlockedAdd(statistics[0].tot_density,nHit); // needs to be atomic.	

	dsum *= factor2;
	cloudPhysics[id.x].d = dsum;
	float densityDelta = dsum - particleRestDensity;

	cloudPhysics[id.x].p =  max(particleStiffness * densityDelta, 0.f);

// BARRIER ONE, now PRESSURE FORCE
	AllMemoryBarrierWithGroupSync(); 

	float factor1;
	float3 p_fs = 0;
	float3 v_fs = 0;
	float3 g = 0;
	factor1 = 45.0 / (PI_FLOAT * smoothingLength6);

	p = cloudPosition[id.x];
	ParticlePyhsics pp = cloudPhysics[id.x];

	for (uint j = 0; j < npts; ++j) {
		if (j == id.x) { // no measureable speed cost vs splitting the loop
			continue;
		}
		d = (cloudPosition[j].pos - p.pos);
		r2 = dot(d,d);
		if (r2<smoothingLength2)
		{
			r = sqrt(r2); 
			p_fs -= (pp.p + cloudPhysics[j].p) / (2.0 - cloudPhysics[j].d) *  pow(smoothingLength - r, 2) * normalize(d);
			v_fs += (cloudPhysics[j].vel - pp.vel)/cloudPhysics[j].d *  (smoothingLength -r);
		}
	}

	v_fs *= particleViscosity;
	g.y = -100000000000000000.0 * cloudPhysics[id.x].d;


	float size = 12;
	float repulse;
	repulse = 1000000000000000000.0 * pp.d;
	float3 force = 0;
	// no measurable speed penalty here:
	if (p.pos.x < -size) { 
		force.x = -repulse * (p.pos.x + size);
		cloudPhysics[id.x].vel *= 0.99;
	} else if (p.pos.x > size) { 
		force.x = -repulse * (p.pos.x - size);
		cloudPhysics[id.x].vel *= 0.99;
	}
	if (p.pos.y < -size) { 
		force.y = -repulse * (p.pos.y + size);
		cloudPhysics[id.x].vel *= 0.99;
	} else if (p.pos.y > size) { 
		force.y = -repulse * (p.pos.y - size);
		cloudPhysics[id.x].vel *= 0.99;
	}
	if (p.pos.z < -size) { 
		force.z = -repulse * (p.pos.z + size);
		cloudPhysics[id.x].vel *= 0.99;
	} else  if (p.pos.z > size) { 
		force.z = -repulse * (p.pos.z - size);
		cloudPhysics[id.x].vel *= 0.99;
	}

    cloudPhysics[id.x].force = particleMass * factor1 * ( v_fs + p_fs + g + force);

// BARRIER 2, NOW INTEGRATE
	AllMemoryBarrierWithGroupSync();

	a = cloudPhysics[id.x].force / cloudPhysics[id.x].d;
	float3 v_n = cloudPhysics[id.x].vel;
	float3 p_n = cloudPosition[id.x].pos;
	v_n += a * time_step;
	p_n += v_n * time_step;

	cloudPosition[id.x].pos = p_n;
	cloudPhysics[id.x].vel = v_n;


	InterlockedAdd(statistics[0].thread_count,1); // needs to be atomic. 
};

